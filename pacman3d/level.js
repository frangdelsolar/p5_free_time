MAP = [[1, 1, 1, 1, 1],
       [1, 0, 0, 0, 1],
       [1, 0, 1, 0, 1],
       [1, 0, 0, 0, 1],
       [1, 1, 1, 1, 1],
];

LEVEL_1 = [
    [ 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3],
    [ 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3],
    [ 3, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 3],
    [ 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3],
    [ 3, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 3],
    [ 3, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 3],
    [ 3, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 3],
    [ 3, 3, 3, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 3, 3, 3, 3],
    [ 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 2, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1],
    [ 3, 3, 3, 3, 3, 0, 0, 0, 1, 3, 3, 3, 1, 0, 0, 0, 3, 3, 3, 3, 3],
    [ 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1],
    [ 3, 3, 3, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 3, 3, 3, 3],
    [ 3, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 3],
    [ 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3],
    [ 3, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 3],
    [ 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 3],
    [ 3, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 3],
    [ 3, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 3],
    [ 3, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 3],
    [ 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3],
    [ 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3],
];


class Level{
    constructor(){
        this.grid = LEVEL_1;
        this.walls = [];

        for(let i=0; i<this.grid.length; i++){
            for(let j=0; j<this.grid[i].length; j++){
                if (this.grid[i][j] === 1){

                    let sq = sqSize;
                    let x1 = j * sq;
                    let x2 = j * sq + sq;
                    let y1 = i * sq;
                    let y2 = i * sq + sq;


                    let b1 = new Boundary(x1, y1, x2, y1);
                    let b2 = new Boundary(x1, y1, x1, y2);
                    let b3 = new Boundary(x2, y1, x2, y2);
                    let b4 = new Boundary(x1, y2, x2, y2);

                    this.walls.push(b1);
                    this.walls.push(b2);
                    this.walls.push(b3);
                    this.walls.push(b4);
                }
            }
        }        
        

    }
    show(){
        // for(let i=0; i<this.grid.length; i++){
        //     for(let j=0; j<this.grid[i].length; j++){
        //         if (this.grid[i][j] != 1){
        //             fill(60);
        //         } else {
        //             fill(230);
        //         }
        //         let x = j * sqSize;
        //         let y = i * sqSize;
        //         let w = sqSize;
        //         let h = sqSize;
        //         rect(x, y, w, h);

        //     }          
        // }

        for (let wall of this.walls) {
            wall.show();
          }

    }
}